"use client";

import { useState } from "react";
import { Copy, Share2, Printer, Check } from "lucide-react";
import { trackCalculatorCopy } from "@/lib/analytics";

interface StickyResultsProps {
  title: string;
  results: Array<{ label: string; value: string; highlight?: boolean }>;
  inputs: Record<string, any>;
  tool: string;
  className?: string;
}

export default function StickyResults({ 
  title, 
  results, 
  inputs, 
  tool, 
  className 
}: StickyResultsProps) {
  const [copied, setCopied] = useState(false);
  const [shared, setShared] = useState(false);

  const handleCopy = async () => {
    const resultsText = results
      .map(result => `${result.label}: ${result.value}`)
      .join('\n');
    
    try {
      await navigator.clipboard.writeText(resultsText);
      setCopied(true);
      trackCalculatorCopy(tool);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy results:', err);
    }
  };

  const handleShare = async () => {
    const params = new URLSearchParams();
    Object.entries(inputs).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        params.set(key, String(value));
      }
    });

    const shareUrl = `${window.location.origin}${window.location.pathname}?${params.toString()}`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: `${title} - WorkPayTools`,
          text: `Check out my ${title.toLowerCase()} results`,
          url: shareUrl,
        });
      } catch (err) {
        if (err instanceof Error && err.name !== 'AbortError') {
          console.error('Error sharing:', err);
        }
      }
    } else {
      try {
        await navigator.clipboard.writeText(shareUrl);
        setShared(true);
        setTimeout(() => setShared(false), 2000);
      } catch (err) {
        console.error('Failed to copy share link:', err);
      }
    }
  };

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${title} - WorkPayTools</title>
          <style>
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              max-width: 600px; 
              margin: 0 auto; 
              padding: 20px;
              color: #1f2937;
            }
            .header { 
              text-align: center; 
              margin-bottom: 30px;
              border-bottom: 2px solid #4f46e5;
              padding-bottom: 20px;
            }
            .header h1 { 
              margin: 0; 
              font-size: 24px; 
              color: #1f2937;
            }
            .header p { 
              margin: 5px 0 0 0; 
              color: #6b7280; 
              font-size: 14px;
            }
            .section { 
              margin-bottom: 25px; 
            }
            .section h2 { 
              font-size: 18px; 
              margin: 0 0 10px 0; 
              color: #374151;
              border-bottom: 1px solid #e5e7eb;
              padding-bottom: 5px;
            }
            .input-item, .result-item { 
              display: flex; 
              justify-content: space-between; 
              padding: 8px 0; 
              border-bottom: 1px solid #f3f4f6;
            }
            .input-item:last-child, .result-item:last-child { 
              border-bottom: none; 
            }
            .label { 
              font-weight: 500; 
              color: #374151;
            }
            .value { 
              color: #1f2937; 
              font-weight: 600;
            }
            .highlight { 
              background-color: #f0f9ff; 
              padding: 2px 6px; 
              border-radius: 4px;
              color: #1e40af;
            }
            .footer { 
              margin-top: 30px; 
              text-align: center; 
              font-size: 12px; 
              color: #9ca3af;
              border-top: 1px solid #e5e7eb;
              padding-top: 15px;
            }
            @media print {
              body { margin: 0; padding: 15px; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${title}</h1>
            <p>Generated by WorkPayTools.com</p>
          </div>
          
          <div class="section">
            <h2>Inputs</h2>
            ${Object.entries(inputs)
              .filter(([_, value]) => value !== undefined && value !== null && value !== '')
              .map(([key, value]) => `
                <div class="input-item">
                  <span class="label">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</span>
                  <span class="value">${value}</span>
                </div>
              `).join('')}
          </div>
          
          <div class="section">
            <h2>Results</h2>
            ${results.map(result => `
              <div class="result-item">
                <span class="label">${result.label}:</span>
                <span class="value ${result.highlight ? 'highlight' : ''}">${result.value}</span>
              </div>
            `).join('')}
          </div>
          
          <div class="footer">
            <p>This calculation is for informational purposes only and should not be considered legal or financial advice.</p>
            <p>Visit WorkPayTools.com for more calculators and HR resources.</p>
          </div>
        </body>
      </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
  };

  return (
    <div className={`hidden md:block sticky top-24 ${className}`}>
      <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          {title}
        </h3>
        
        <div className="space-y-3 mb-6">
          {results.map((result, index) => (
            <div key={index} className="flex justify-between items-center">
              <span className="text-sm text-gray-600 dark:text-gray-400">
                {result.label}
              </span>
              <span className={`text-sm font-medium ${
                result.highlight 
                  ? 'text-indigo-600 dark:text-indigo-400' 
                  : 'text-gray-900 dark:text-white'
              }`}>
                {result.value}
              </span>
            </div>
          ))}
        </div>

        <div className="space-y-2">
          <button
            onClick={handleCopy}
            className="w-full flex items-center justify-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors"
          >
            {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
            {copied ? 'Copied!' : 'Copy Results'}
          </button>
          
          <button
            onClick={handleShare}
            className="w-full flex items-center justify-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors"
          >
            {shared ? <Check className="h-4 w-4" /> : <Share2 className="h-4 w-4" />}
            {shared ? 'Link Copied!' : 'Share Link'}
          </button>
          
          <button
            onClick={handlePrint}
            className="w-full flex items-center justify-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors"
          >
            <Printer className="h-4 w-4" />
            Print
          </button>
        </div>
      </div>
    </div>
  );
}
